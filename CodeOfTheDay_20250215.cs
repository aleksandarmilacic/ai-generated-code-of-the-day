using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        // Initialize list of integers
        List<int> numbers = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

        // Call the Fibonacci method
        List<int> fibonacciNumbers = GetFibonacciNumbers(numbers);

        // Display the result
        foreach (int num in fibonacciNumbers)
        {
            Console.WriteLine(num);
        }
    }

    // Method to generate Fibonacci sequence based on a list of numbers
    static List<int> GetFibonacciNumbers(List<int> numbers)
    {
        List<int> fibonacciNumbers = new List<int>();
        
        foreach (int num in numbers)
        {
            if (num == 1 || num == 2)
            {
                fibonacciNumbers.Add(1);
            }
            else
            {
                int a = 1;
                int b = 1;
                int fibonacci;

                // Calculate the Fibonacci number for each number in the list
                for (int i = 3; i <= num; i++)
                {
                    fibonacci = a + b;
                    a = b;
                    b = fibonacci;
                }

                fibonacciNumbers.Add(b);
            }
        }

        return fibonacciNumbers;
    }
}